{"version":3,"sources":["features/cardsSlice.js","components/Input.js","components/Card.js","App.js","app/store.js","index.js"],"names":["_clearActualMatch","state","actualMatched","cardsInGame","map","card","find","matchedCard","id","isFlipped","cardsSlice","createSlice","name","initialState","completed","reducers","saveCards","action","length","push","payload","sort","Math","random","flipCardAndMatch","value","clearActualMatch","newGame","repeatGame","actions","selectCards","cards","Input","useState","input","setInput","dispatch","useDispatch","className","type","placeholder","onChange","e","target","onKeyPress","key","nanoid","content","slice","indexOf","Card","handleClick","flipDirection","onClick","App","words","useSelector","timeoutHandler","setTimeoutHandler","useCallback","cardId","clearTimeout","handler","setTimeout","word","store","configureStore","reducer","cardReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.204b0bf1.chunk.js","sourcesContent":["// card.className = 'card-inactive'\r\n// className={`session-sign-${sessionOn && !breakIsOn ? 'active':'inactive'}`}> \r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport '../App.scss'\r\n\r\nconst initialState = {\r\n    cardsInGame: [],\r\n\tactualMatched: [],\r\n\tcompleted:[],\r\n}\r\n\r\nconst _clearActualMatch = (state) => {\r\n\tconst actualMatched = state.actualMatched;\r\n\tstate.actualMatched = [];\r\n\tstate.cardsInGame = state.cardsInGame.map((card) => {\r\n\t\tif (actualMatched.find(matchedCard => matchedCard.id === card.id)) {\r\n\t\t\tcard.isFlipped = false;\r\n\t\t}\r\n\t\t\r\n\t\treturn card;\r\n\t});\r\n}\r\n\r\nconst cardsSlice = createSlice({\r\n    name: 'cards',\r\n    initialState,\r\n    reducers: {\r\n\r\n        saveCards: (state, action) => {\r\n            if(state.cardsInGame.length < 24) {\r\n\t            _clearActualMatch(state);\r\n                state.cardsInGame.push(action.payload[0]);\r\n                state.cardsInGame.push(action.payload[1]);\r\n                state.cardsInGame.sort(() => .5 - Math.random())\r\n            }\r\n        },\r\n\r\n\t    flipCardAndMatch: (state, action) => {\r\n        \tif (state.actualMatched.length === 2) {\r\n\t\t        _clearActualMatch(state);\r\n\t        }\r\n\r\n\t    \tstate.cardsInGame = state.cardsInGame.map((card) => {\r\n\t    \t\tif (card.id === action.payload.id) {\r\n\t\t\t\t    card.isFlipped = action.payload.isFlipped;\r\n\t\t\t\t\t// card.style={color: \"red\"};\t\t\t\t\r\n\t\t\t\t\t// document.card.className='card-translation-inactive';\r\n\t\t\t\t    state.actualMatched.push(card);\t\t\t\t   \r\n\t\t\t\t\tstate.completed.push(card);\r\n\t\t\t\t\t// if (state.completed.includes()){\r\n\t\t\t\t\t// \tcard.className\t\r\n\t\t\t\t\t// }\r\n\t\t\t\t\t\t\r\n\t\t\t    }\r\n\t    \t\t\treturn card;\r\n\t\t    });\r\n\t\t\t\r\n\t\t    if (state.actualMatched.length === 2 &&\r\n\t\t\t    state.actualMatched[0].value===state.actualMatched[1].value) {\t\t\t\t\r\n\t\t\t\t\tstate.actualMatched = [];\r\n\t\t\t\t}\r\n\t\t},\r\n\t\t\t\r\n\t\tclearActualMatch: (state, action) => {\r\n\t\t\t\t_clearActualMatch(state);\r\n\t    },\r\n\r\n\t\tnewGame: (state, action) => {\r\n\t\t\tstate.cardsInGame = []\r\n\t\t},\r\n\r\n\t\trepeatGame: (state, action) => {\r\n\t\t\tstate.cardsInGame.sort(() => .5 - Math.random());\r\n\t\t\tstate.cardsInGame = state.cardsInGame.map((card) => {\t    \t\t\r\n\t\t\t\tcard.isFlipped = false;\t\t\r\n\t    \t\treturn card;\r\n\t\t    })\r\n\t\t}\r\n}});\r\n\r\nexport const { saveCards, flipCardAndMatch, clearActualMatch, newGame, repeatGame, matchedCard, completed } = cardsSlice.actions\r\n\r\nexport const selectCards = state => state.cards.cardsInGame\r\n\r\nexport default cardsSlice.reducer\r\n","import React, { useState } from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {saveCards} from '../features/cardsSlice'\r\nimport { nanoid } from 'nanoid';\r\n\r\n\r\nconst Input = () => {\r\n\r\n    const [input, setInput] = useState ('')\r\n    const dispatch = useDispatch()\r\n\r\n    const addNewCards = e => {\r\n        if (input !== '' && e.key === 'Enter') {\r\n\r\n            dispatch( saveCards ( \r\n                    [{\r\n                        id: nanoid(),\r\n                        value: input,\r\n                        content: input.slice(0, input.indexOf('=')),\r\n                        isFlipped: false,\r\n                        // className: '',\r\n                    },\r\n                    {\r\n                        id: nanoid(),\r\n                        value: input,\r\n                        content: input.slice(input.indexOf('=') +1),\r\n                        isFlipped: false,\r\n                        // className: '',\r\n                    }]\r\n                ));\r\n\r\n        setInput('')\r\n    }};\r\n\r\n\r\n    return (\r\n        <div className='input'>\r\n            <input\r\n                type='text'\r\n                value={input}\r\n                placeholder='word=translation and enter'\r\n                onChange={e=>setInput(e.target.value)}\r\n                onKeyPress={addNewCards}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react';\r\nimport '../App.scss';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport Tilt from 'react-parallax-tilt';\r\n// import { completed } from '../features/cardsSlice';\r\n\r\nconst Card = ( { handleClick, content, id, isFlipped, value } ) => {\r\n    \r\n    // const colorChange = () => {\r\n        \r\n    //     return <div className={'card-translation'};\r\n       \r\n    //     setTimeout(() => {\r\n    //         return <div className={'card-translation-inactive'}></div>\r\n    //     }, 1000);\r\n    // }\r\n\r\n    // let cardColor = {\r\n    //     backgroundColor:'red'\r\n    // }\r\n\r\n    // if( isFlipped && completed.filter(id) ) {\r\n    //     cardColor.backgroundColor = 'blue'\r\n    // }\r\n    \r\n    return (\r\n        <Tilt>\r\n            <ReactCardFlip isFlipped={isFlipped} flipDirection='horizontal'  >\r\n\r\n                <div\r\n                    className='card'\r\n                    onClick={() => handleClick(id)}\r\n                    id={id} \r\n                    value={value}\r\n                >\r\n                </div>\r\n\r\n                <div\r\n                    className='card-translation'\r\n                    // className={`card-${ isFlipped ? 'translation': ''}`}\r\n                    // style={{ setTimeout(() => {\r\n                    //     { backgroundColor: 'grey'}\r\n                    //   }, 1500) }}\r\n                    id={id}\r\n                    value={value}\r\n                >    \r\n                    {content}\r\n                </div>\r\n\r\n            </ReactCardFlip>\r\n        </Tilt>\r\n    );\r\n}\r\n\r\nexport default Card\r\n\r\n\r\n\r\n","import React, { useCallback, useState } from 'react';\nimport './App.scss'\nimport Input from './components/Input'\nimport { IoMdRepeat }   from 'react-icons/io';\nimport { MdDelete }  from 'react-icons/md';\nimport Card                                                from './components/Card'\nimport { useDispatch, useSelector }                        from 'react-redux'\nimport { clearActualMatch, flipCardAndMatch, selectCards, newGame, repeatGame } from './features/cardsSlice'\n\nfunction App() {\n   const words = useSelector(selectCards)\n\tconst [timeoutHandler, setTimeoutHandler] = useState(null);\n   const dispatch = useDispatch()\n\n   const handleClick = useCallback((cardId) => {\n\t\tif (timeoutHandler) {\n\t\t\tclearTimeout(timeoutHandler)\n\t\t};\n\n\t\tdispatch(flipCardAndMatch({\n\t\t\tid: cardId,\n\t\t\tisFlipped: true,\n\t\t}));\n\n\t\tconst handler = setTimeout(()=> {\n\t\t\tdispatch(clearActualMatch())\n\t\t}, 3000);\n\n\t\tsetTimeoutHandler(handler);\n\n\t}, [timeoutHandler, setTimeoutHandler]);\n\n\n   const reset = () => {\n      dispatch( newGame (\n         { type: 'reset'}\n      ))\n   }\n\n   const repeat = () => {\n      dispatch( repeatGame (\n         { type: 'repeat'}\n      ))\n   }\n\n\treturn (\n    <>\n      <div className='wrapper'>\n\n          <div className = 'header'>\n            <h1 className ='logo'>  memory! </h1>\n            <Input />\n            <div className='buttonsContainer'>\n               <button onClick={repeat} className='btn btn1'> <IoMdRepeat/> </button>\n               <button onClick={reset} className='btn btn2'> <MdDelete/> </button>\n            </div>\n          </div>\n\n          <div className='cards-table'>\n\n            {words.map( word =>\n               <Card\n                  key={word.id}\n                  content={word.content}\n                  id={word.id}\n                  isFlipped={word.isFlipped}\n                  handleClick={handleClick}\n                  value={word.value}\n                  // className={''}\n               />\n              )}\n          </div>\n      </div>\n   </>\n  )\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport cardReducer from '../features/cardsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    cards: cardReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}